import boto3
import requests
import os
import re
from botocore.client import Config
from urllib.parse import quote
from concurrent.futures import ThreadPoolExecutor
import time
from datetime import datetime

# ------------------------------------------------------------------------------
# ‚¨áÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ¬´–æ–±—Ä–∞—Ç–Ω–æ–π¬ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
# TRUE  ‚Üí  –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –ù–ï–¢ –Ω–∞ –Ø‚Äë–¥–∏—Å–∫–µ, –º—ã —É–¥–∞–ª—è–µ–º –µ–≥–æ –∫–æ–ø–∏—é –∏–∑ S3
# FALSE ‚Üí  –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ–º
DELETE_MISSING = True
# ------------------------------------------------------------------------------

def delete_from_s3(key: str):
    """–£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ S3 –∏ –≤—ã–≤–µ—Å—Ç–∏ –ª–æ–≥."""
    s3.delete_object(Bucket=bucket_name, Key=key)
    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ –∏–∑ S3: {key}")

# üîê –î–æ—Å—Ç—É–ø –∫ S3
s3 = boto3.client(
    's3',
    endpoint_url='https://storage.yandexcloud.net',
    region_name=os.getenv("YANDEX_REGION", "ru-central1"),
    aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
    aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY'),
    config=Config(signature_version='s3v4')
)

bucket_name = 'yolobot'
prefix = 'invoices/'
local_tmp = '/tmp'

# üîê –î–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É (—á–µ—Ä–µ–∑ WebDAV)
YANDEX_LOGIN = os.getenv('YANDEX_LOGIN')
YANDEX_APP_PASSWORD = os.getenv('YANDEX_APP_PASSWORD')
DISK_FOLDER = '–ù–∞–∫–ª–∞–¥–Ω—ã–µ'


def is_already_uploaded(key: str) -> bool:
    parts = key.split('/')
    if len(parts) < 3:
        return False
    subfolder, filename = parts[1], parts[2]
    return filename in existing_cache.get(subfolder, set())




def ensure_folder_exists(folder_name):
    url = f"https://webdav.yandex.ru/{quote(DISK_FOLDER + '/' + folder_name)}"
    r = requests.request("MKCOL", url, auth=(YANDEX_LOGIN, YANDEX_APP_PASSWORD))
    if r.status_code not in (201, 405):  # 201 = —Å–æ–∑–¥–∞–Ω–æ, 405 = —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É {folder_name}: {r.status_code} {r.text}")

#def file_exists_on_disk(subfolder, filename):
#    url = f"https://webdav.yandex.ru/{quote(DISK_FOLDER + '/' + subfolder + '/' + filename)}"
#    r = requests.head(url, auth=(YANDEX_LOGIN, YANDEX_APP_PASSWORD))
#    return r.status_code == 200

def list_files_in_disk_folder(folder):
    url = f"https://webdav.yandex.ru/{quote(DISK_FOLDER + '/' + folder)}"
    r = requests.request(
        "PROPFIND", url,
        auth=(YANDEX_LOGIN, YANDEX_APP_PASSWORD),
        headers={"Depth": "1"}
    )
    if r.status_code != 207:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ {folder}: {r.status_code}")
        return set()

    names = set()
    # –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ <d:href>‚Ä¶</d:href> –∏ –±–µ—Ä—ë–º —á–∏—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    for href in re.findall(r"<d:href>(.*?)</d:href>", r.text, flags=re.IGNORECASE):
        if f"/{folder}/" in href and '.' in href:
            names.add(href.split('/')[-1])        # —É–∂–µ –±–µ–∑ —Ç–µ–≥–∞
    return names

existing_cache = {}

def upload_to_disk(local_path, key):
    parts = key.split('/')
    subfolder = parts[1] if len(parts) >= 3 else ''
    filename  = parts[2] if len(parts) >= 3 else parts[-1]

    ensure_folder_exists(subfolder)


    if len(parts) >= 3:
        subfolder = parts[1]
        filename = parts[2]
    else:
        subfolder = ''
        filename = parts[-1]

    ensure_folder_exists(subfolder)



    if filename in existing_cache[subfolder]:
        print(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å): {subfolder}/{filename}")
        return

    upload_url = f"https://webdav.yandex.ru/{quote(DISK_FOLDER + '/' + subfolder + '/' + filename)}"
    with open(local_path, 'rb') as f:
        r = requests.put(upload_url, auth=(YANDEX_LOGIN, YANDEX_APP_PASSWORD), data=f)

    print(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {subfolder}/{filename} ‚Üí —Å—Ç–∞—Ç—É—Å: {r.status_code}")

    existing_cache.setdefault(subfolder, set()).add(filename)


def sync():
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å –¥–∏—Å–∫–∞...")
    existing_cache.clear()
    disk_folders = set()

    response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)

    # 1. –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏ invoices/YYYY-MM-DD
    for obj in response.get('Contents', []):
        key = obj['Key']
        if key.endswith('/'):
            continue
        parts = key.split('/')
        if len(parts) >= 3:
            disk_folders.add(parts[1])

    # 2. –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∞–ø–∫–∏ —Å –¥–∏—Å–∫–∞
    for folder in disk_folders:
        existing_cache[folder] = list_files_in_disk_folder(folder)

    # 3. –ö–∞—á–∞–µ–º –∏ –∑–∞–ª–∏–≤–∞–µ–º —Ç–æ, —á–µ–≥–æ –Ω–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ
    for obj in response.get('Contents', []):
        key = obj['Key']
        if key.endswith('/'):
            continue
        if not is_already_uploaded(key):
            filename   = key.split('/')[-1]
            local_path = os.path.join(local_tmp, filename)
            s3.download_file(bucket_name, key, local_path)
            print(f'üì• –°–∫–∞—á–∞–Ω–æ: {key}')
            upload_to_disk(local_path, key)
        else:
            print(f'‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å): {key}')

    # 4. –£–¥–∞–ª—è–µ–º –∏–∑ S3 –æ–±—ä–µ–∫—Ç—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ –¥–∏—Å–∫–µ
    if DELETE_MISSING:
        for obj in response.get('Contents', []):
            key = obj['Key']
            if key.endswith('/'):
                continue
            parts = key.split('/')
            if len(parts) < 3:
                continue
            subfolder, filename = parts[1], parts[2]
            if filename not in existing_cache.get(subfolder, set()):
                delete_from_s3(key)

print("üß™ KEY:", os.getenv('AWS_ACCESS_KEY_ID'))
print("üß™ SECRET:", os.getenv('AWS_SECRET_ACCESS_KEY')[:5], '...')


if __name__ == '__main__':
    while True:
        now = datetime.now()
        hour = now.hour

        if 8 <= hour < 17:
            try:
                print(f"üöÄ [{now.strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
                sync()
                print(f"‚úÖ [{now.strftime('%H:%M:%S')}] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            except Exception as e:
                print(f"‚ùå [{now.strftime('%H:%M:%S')}] –û–®–ò–ë–ö–ê:", e)
        else:
            print(f"‚è∏Ô∏è –°–µ–π—á–∞—Å {hour}:00 ‚Äî –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (8‚Äì17)")

        time.sleep(300)  # 5 –º–∏–Ω—É—Ç